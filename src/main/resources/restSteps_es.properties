rest.set.host=[Ee]l host '(.*)'
rest.set.host.port=[Ee]l host '(.*)' y el puerto (\\d+)
rest.set.service=[Ee]l servicio (.*) '(.*)'
rest.set.charset=[Ee]l juego de carácteres '(.*)'
rest.set.entity=(?:[Ee]l|[Ll]a|[Uu]n|[Uu]na) (?:.*) identificado por (?:.*)'(.*)'

rest.action.get.id.service=[Ss]e consultan? (?:.* )identificado por (?:.*)'(.*)' usando el servicio (.*) '(.*)'
rest.action.get.id.predefined.service=[Ss]e consultan? (?:.* )identificado por (?:.*)'(.*)' usando el servicio
rest.action.get.predefined.id.service=[Ss]e consultan? (?:.*)(?!:identificado por)(?:.*)usando el servicio (.*) '(.*)'
rest.action.get.predefined.id.predefined.service=[Ss]e consultan? (?:.*)(?!:identificado por)(?:.*)usando el servicio
rest.action.put.id.service.from.text=[Ss]e modifican? (?:.* )identificado por (?:.*)'(.*)' usando el servicio (.*) '(.*)' y los siguientes datos:
rest.action.put.id.predefined.service.from.text=[Ss]e modifican? (?:.* )identificado por (?:.*)'(.*)' usando el servicio y los siguientes datos:
rest.action.put.predefined.id.service.from.text=[Ss]e modifican? (?:.*)(?!:identificado por)(?:.*)usando el servicio (.*) '(.*)' y los siguientes datos:
rest.action.put.predefined.id.predefined.service.from.text=[Ss]e modifican? (?:.*)(?!:identificado por)(?:.*)usando el servicio y los siguientes datos:
rest.action.put.id.service.from.file=[Ss]e modifican? (?:.* )identificado por (?:.*)'(.*)' usando el servicio (.*) '(.*)' y los datos del fichero '(.*)'
rest.action.put.id.predefined.service.from.file=[Ss]e modifican? (?:.* )identificado por (?:.*)'(.*)' usando el servicio y los datos del fichero '(.*)'
rest.action.put.predefined.id.service.from.file=[Ss]e modifican? (?:.*)(?!:identificado por)(?:.*)usando el servicio (.*) '(.*)' y los datos del fichero '(.*)'
rest.action.put.predefined.id.predefined.service.from.file=[Ss]e modifican? (?:.*)(?!:identificado por)(?:.*)usando el servicio y los datos del fichero '(.*)'
rest.action.post.service.from.text=[Ss]e envían? (?:.* )usando el servicio (.*) '(.*)' y los siguientes datos:
rest.action.post.predefined.service.from.text=[Ss]e envían? (?:.* )usando el servicio y los siguientes datos:
rest.action.post.service.from.file=[Ss]e envían? (?:.* )usando el servicio (.*) '(.*)' y los datos del fichero '(.*)'
rest.action.post.predefined.service.from.file=[Ss]e envían? (?:.* )usando el servicio y los datos del fichero '(.*)'
rest.action.delete.id.service=[Ss]e eliminan? (?:.* )identificado por (?:.*)'(.*)' usando el servicio (.*) '(.*)'
rest.action.delete.id.predefined.service=[Ss]e eliminan? (?:.* )identificado por (?:.*)'(.*)' usando el servicio
rest.action.delete.predefined.id.service=[Ss]e eliminan? (?:.*)(?!:identificado por)(?:.*)usando el servicio (.*) '(.*)'
rest.action.delete.predefined.id.predefined.service=[Ss]e eliminan? (?:.*)(?!:identificado por)(?:.*)usando el servicio


rest.assert.http.code=[Ss]e cumple que el servicio retorna el código HTTP (\\d+)
rest.assert.http.code.matcher.number=[Ss]e cumple que el código HTTP retornado (.*) (\\d+)
rest.assert.http.contentType=[Ss]e cumple que el servicio retorna datos en formato (.*)
rest.assert.http.length=[Ss]e cumple que el servicio retorna (\\d+) bytes
rest.assert.http.length.empty=[Ss]e cumple que el servicio no retorna nada
rest.assert.http.length.matcher.number=[Ss]e cumple que el número de bytes retornados (.*) (\\d+)
rest.assert.http.header=[Ss]e cumple que el servicio retorna la cabecera HTTP '(.*)'
rest.assert.http.header.matcher.number=[Ss]e cumple que la cabecera HTTP retornada '(.*)' (.*) (\\d+)
rest.assert.http.header.matcher.string=[Ss]e cumple que la cabecera HTTP retornada '(.*)' (.*) '(.*)'
rest.assert.body.full.loose.from.text=[Ss]e cumple que el servicio retorna parcialmente(.*):
rest.assert.body.full.strict.from.text=[Ss]e cumple que el servicio retorna exactamente(.*):
rest.assert.body.full.loose.from.file=[Ss]e cumple que el servicio retorna parcialmente el contenido del fichero '(.*)'
rest.assert.body.full.strict.from.file=[Ss]e cumple que el servicio retorna exactamente el contenido del fichero '(.*)'
rest.assert.body.segment.matcher.unary=[Ss]e cumple que,? en la respuesta,? (?:.*)'(.*)' ([^'\d]*)
rest.assert.body.segment.matcher.binary.string=[Ss]e cumple que,? en la respuesta,? (?:.*)'(.*)' (.*) '(.*)'
rest.assert.body.segment.matcher.binary.number=[Ss]e cumple que,? en la respuesta,? (?:.*)'(.*)' (.*) (\\d+\\.?\\d*)
rest.assert.body.array.size.matcher.binary.number=[Ss]e cumple que,? en la respuesta,? (?:(?:el tamaño de)|(?:la longitud de))(?:.*)('.*') (.*) (\\d+)
