# This file is a template, and might need editing before it works on your project.
---
# Build JAVA applications using Apache Maven (http://maven.apache.org)
# For docker image tags see https://hub.docker.com/_/maven/
#
# For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
#
# This template will build and test your projects as well as create the documentation.
#
# * Caches downloaded dependencies and plugins between invocation.
# * Verify but don't deploy merge requests.
# * Deploy built artifacts from master branch only.
# * Shows how to use multiple jobs in test stage for verifying functionality
#   with multiple JDKs.
# * Uses site:stage to collect the documentation for multi-module projects.
# * Publishes the documentation for `master` branch.

variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"


stages:
  - build
  - verify
  - assemble
  - publish

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  key: one-key-to-rule-them-all
  paths:
    - .m2/repository
    - target
    - "*/target"

.maven: &maven
  image: maven:3.6.1-jdk-8
  artifacts:
    paths:
      - target

build:
  <<: *maven
  stage: build
  script:
    - 'mvn install $MAVEN_CLI_OPTS'

verify:
  <<: *maven
  stage: verify
  dependencies:
    - build
  script:
    - 'mvn verify $MAVEN_CLI_OPTS'


generate_site:
  <<: *maven
  stage: assemble
  dependencies:
    - verify
  script:
    - 'mvn site site:stage $MAVEN_CLI_OPTS'
  only:
    - master
  allow_failure: true    


generate_artifacts:
  <<: *maven
  stage: assemble
  dependencies:
    - verify
  script:
    - 'mvn package -DskipTests -Dassemble-zips'
    - 'mkdir artifacts'
    - 'find -type f -name "kukumo*.zip" -exec cp {} artifacts/ \;'
    - 'find -type f -name "*.jar" -exec cp {} artifacts/ \;'
  artifacts:
    paths:
      - target
      - artifacts
  only:
    - master
  allow_failure: true


pages:
  image: busybox:latest
  stage: publish
  dependencies:
    - assemble
  script:
    - mkdir public
    - cp -rf target/staging/* public/
  artifacts:
    paths:
      - public
      - artifacts
  only:
    - master
  allow_failure: true
