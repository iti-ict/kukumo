db.define.connection.parameters=the database connection URL {url:text} using the user {username:text} and the password {password:text}
db.define.database.schema=the database schema {word}


db.action.script.document=(that) the following SQL script is executed:
db.action.script.file=(that) the SQL script file {file} is executed

db.action.clear.table.all=(that) the database table {word} is cleared
db.action.clear.table.row.one.column=(that) * in the database table {table:word} having column {column:word} = {value:text} is|are cleared
db.action.clear.table.row.two.columns=(that) * in the database table {table:word} having column {column1:word} = {value1:text} and column {column2:word} = {value2:text} is|are cleared


db.action.insert.from.data=(that) the following * is|are inserted in the database table {word}:
db.action.insert.from.xls=(that) the content of the XLS file {file} is inserted in the database 
db.action.insert.from.csv=(that) the content of the CSV file {csv:file} is inserted in the database table {table:word}

db.action.delete.from.data=(that) the following * is|are deleted from the database table {word}:
db.action.delete.from.xls=(that) the content of the XLS file {file} is deleted from the database 
db.action.delete.from.csv=(that) the content of the CSV file {csv:file} is deleted from the database table {table:word}

db.assert.table.exists.row.single.id=exists * identified by {id:text} in the database table {table:word}
db.assert.table.exists.row.one.column=exists * in the database table {table:word} having column {column:word} = {value:text}
db.assert.table.exists.row.two.columns=exists * in the database table {table:word} having column {column1:word} = {value1:text} and column {column2:word} = {value2:text} 
db.assert.table.exists.sql.where=exists * in the database table {table:word} satisfying the SQL clause {sql:text}
db.assert.table.exists.data=the following * exist(s) in the database table {word}:
db.assert.table.exists.xls=the content of the XLS file {file} exists in the database
db.assert.table.exists.csv=the content of the CSV file {csv:file} exists in the database table {table:word}

db.assert.table.not.exists.row.single.id=does not exist * identified by {id:text} in the database table {table:word}
db.assert.table.not.exists.row.one.column=does not exist * in the database table {table:word} having column {column:word} = {value:text}
db.assert.table.not.exists.row.two.columns=does not exist * in the database table {table:word} having column {column1:word} = {value1:text} and column {column2:word} = {value2:text}
db.assert.table.not.exists.sql.where=does not exist * in the database table {table:word} satisfying the SQL clause {sql:text}
db.assert.table.not.exists.data=the following * do(es) not exist in the database table {word}:
db.assert.table.not.exists.xls=the content of the XLS file {file} does not exist in the database
db.assert.table.not.exists.csv=the content of the CSV file {csv:file} does not exist in the database table {table:word}


db.assert.table.count.row.single.id=the number of * identified by {id:text} in the database table {table:word} {matcher:long-assertion}
db.assert.table.count.row.one.column=the number of * in the database table {table:word} having column {column:word} = {value:text} {matcher:long-assertion}
db.assert.table.count.row.two.columns=the number of * in the database table {table:word} having column {column1:word} = {value1:text} and column {column2:word} = {value2:text} {matcher:long-assertion}
db.assert.table.count.sql.where=the number of * in the database table {table:word} satisfying the SQL clause {sql:text} {matcher:long-assertion}
db.assert.table.count.data=the number of * satisfying the following * in the database table {table:word} {matcher:long-assertion}:


db.assert.table.empty=the database table {word} is empty
db.assert.table.not.empty=the database table {word} is not empty